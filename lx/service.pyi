'''Autogenerated dummy service module enabling code completion in Python editors
 MODO Build #654077
'''

class AudioAnim:
    def Audio(self):
        '''Audio object = Audio()'''
        pass

    def End(self):
        '''float = End()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def ItemAudio(self, obj):
        '''Unknown object = ItemAudio(object obj)'''
        pass

    def ItemSample(self, obj, loop, time, type, value):
        '''ItemSample(object obj,integer loop,float time,integer type,pointer value)'''
        pass

    def Loop(self):
        '''integer = Loop()'''
        pass

    def Mute(self):
        '''integer = Mute()'''
        pass

    def Playing(self):
        '''integer = Playing()'''
        pass

    def Preview(self, startTime, endTime):
        '''Audio object = Preview(float startTime,float endTime)'''
        pass

    def Sample(self, time, type, value):
        '''Sample(float time,integer type,data[] value)'''
        pass

    def Scrub(self):
        '''integer = Scrub()'''
        pass

    def Start(self):
        '''float = Start()'''
        pass



class Cache:
    def GetData(self, name, key):
        '''Unknown object = GetData(string name,integer key)'''
        pass

    def PurgeData(self, name):
        '''PurgeData(string name)'''
        pass

    def Register(self, name):
        '''Register(string name)'''
        pass

    def Release(self, name):
        '''Release(string name)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetData(self, name, key, data):
        '''SetData(string name,integer key,object data)'''
        pass



class ChannelUI:
    def ChannelDescription(self, item, channel):
        '''string desc = ChannelDescription(object item,integer channel)'''
        pass

    def ChannelToolTip(self, item, channel):
        '''string tip = ChannelToolTip(object item,integer channel)'''
        pass

    def ChannelUserName(self, item, channel):
        '''string = ChannelUserName(object item,integer channel)'''
        pass

    def ItemTypeDesc(self, typeID, useSuper):
        '''string name = ItemTypeDesc(integer typeID,integer useSuper)'''
        pass

    def ItemTypeIconText(self, typeID, useSuper):
        '''string = ItemTypeIconText(integer typeID,integer useSuper)'''
        pass

    def ItemTypeName(self, typeID, useSuper):
        '''string name = ItemTypeName(integer typeID,integer useSuper)'''
        pass

    def MeshMapUserName(self, name, addIcon):
        '''string = MeshMapUserName(string name,integer addIcon)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class ColorMapping:
    def ConfigCount(self):
        '''integer = ConfigCount()'''
        pass

    def ConfigFullPath(self, index):
        '''string configPath = ConfigFullPath(integer index)'''
        pass

    def ConfigName(self, index):
        '''string configName = ConfigName(integer index)'''
        pass

    def GetDisplayColorMapping(self):
        '''ColorMapping object = GetDisplayColorMapping()'''
        pass

    def GetNumericColorMapping(self):
        '''ColorMapping object = GetNumericColorMapping()'''
        pass

    def MakeColorMapping(self, colorspaceName, toLinear):
        '''ColorMapping object = MakeColorMapping(string colorspaceName,integer toLinear)'''
        pass

    def RegisterColorspaceForConfig(self, configName, colorspaceName):
        '''RegisterColorspaceForConfig(string configName,string colorspaceName)'''
        pass



class Command:
    def AliasCreate(self, name, targetCmd, targetTag, targetName, args):
        '''AliasCreate(string name,object targetCmd,integer targetTag,string targetName,string args)'''
        pass

    def AliasDelete(self, alias, tag, name):
        '''AliasDelete(object alias,integer tag,string name)'''
        pass

    def AllocateUIHintsFromCommand(self, cmd, argIndex):
        '''UIHints object = AllocateUIHintsFromCommand(object cmd,integer argIndex)'''
        pass

    def ArgsAsString(self, cmd, includeCmd):
        '''string = ArgsAsString(object cmd,integer includeCmd)'''
        pass

    def ArgsAsStringLen(self, cmd, includeCmd):
        '''string = ArgsAsStringLen(object cmd,integer includeCmd)'''
        pass

    def ArgsAsStringWithOptions(self, cmd, options):
        '''string = ArgsAsStringWithOptions(object cmd,integer options)'''
        pass

    def BlockBegin(self, name, flags):
        '''BlockBegin(string name,integer flags)'''
        pass

    def BlockEnd(self):
        '''BlockEnd()'''
        pass

    def CancelDoAtEndOfRootLevelUndoableCommand(self, visitor):
        '''CancelDoAtEndOfRootLevelUndoableCommand(object visitor)'''
        pass

    def CommandByIndex(self, index):
        '''Command object = CommandByIndex(integer index)'''
        pass

    def CommandCount(self):
        '''integer count = CommandCount()'''
        pass

    def CreateQueryObject(self, typeName):
        '''ValueArray object = CreateQueryObject(string typeName)'''
        pass

    def CurrentExecDepth(self):
        '''integer depth = CurrentExecDepth()'''
        pass

    def CurrentExecIsRoot(self, ignoreBlocks):
        '''CurrentExecIsRoot(integer ignoreBlocks)'''
        pass

    def DoAtEndOfRootLevelUndoableCommand(self, visitor):
        '''DoAtEndOfRootLevelUndoableCommand(object visitor)'''
        pass

    def ExecEntryAsArgString(self, index):
        '''string = ExecEntryAsArgString(integer index)'''
        pass

    def ExecEntryName(self, index):
        '''string name = ExecEntryName(integer index)'''
        pass

    def ExecEntryType(self, index):
        '''integer type = ExecEntryType(integer index)'''
        pass

    def ExecEntryUserName(self, index):
        '''string userName = ExecEntryUserName(integer index)'''
        pass

    def ExecFlagsAsPrefixString(self, flags):
        '''string = ExecFlagsAsPrefixString(integer flags)'''
        pass

    def ExecuteArgString(self, execFlags, tag, args):
        '''ExecuteArgString(integer execFlags,integer tag,string args)'''
        pass

    def ExecuteArgString2(self, execFlags, tag, args):
        '''Command object = ExecuteArgString2(integer execFlags,integer tag,string args)'''
        pass

    def ExecuteAttribObject(self, execFlags, tag, cmdName, attribArgs):
        '''ExecuteAttribObject(integer execFlags,integer tag,string cmdName,object attribArgs)'''
        pass

    def ExecuteAttribObject2(self, execFlags, tag, cmdName, attribArgs):
        '''Command object = ExecuteAttribObject2(integer execFlags,integer tag,string cmdName,object attribArgs)'''
        pass

    def ExecuteBooleanArgString(self, execFlags, tag, args):
        '''ExecuteBooleanArgString(integer execFlags,integer tag,string args)'''
        pass

    def ExecuteBooleanArgString2(self, execFlags, tag, args):
        '''Command object = ExecuteBooleanArgString2(integer execFlags,integer tag,string args)'''
        pass

    def ExecuteImplicitScript(self, definition, execFlags):
        '''ExecuteImplicitScript(string definition,integer execFlags)'''
        pass

    def ExecuteImplicitScript2(self, definition, execFlags):
        '''Command object = ExecuteImplicitScript2(string definition,integer execFlags)'''
        pass

    def ExecuteSpecial(self, execFlags, cmd, specialArgIndex):
        '''ExecuteSpecial(integer execFlags,object cmd,integer specialArgIndex)'''
        pass

    def ExecuteToggleArgString(self, execFlags, tag, args, newState):
        '''ExecuteToggleArgString(integer execFlags,integer tag,string args,integer newState)'''
        pass

    def ExecuteToggleArgString2(self, execFlags, tag, args, newState):
        '''Command object = ExecuteToggleArgString2(integer execFlags,integer tag,string args,integer newState)'''
        pass

    def GetNameSep(self):
        '''integer sep = GetNameSep()'''
        pass

    def GetToggleArgState(self, cmd):
        '''(integer state,Value object) = GetToggleArgState(object cmd)'''
        pass

    def IsAliased(self, cmd):
        '''boolean = IsAliased(object cmd)'''
        pass

    def IsBooleanArgString(self, string):
        '''boolean = IsBooleanArgString(string string)'''
        pass

    def IsContainer(self, cmd):
        '''boolean = IsContainer(object cmd)'''
        pass

    def IsGlobalInteractionOK(self):
        '''boolean = IsGlobalInteractionOK()'''
        pass

    def IsImplicitScript(self, definition):
        '''boolean = IsImplicitScript(string definition)'''
        pass

    def IsToggleArgString(self, string):
        '''boolean = IsToggleArgString(string string)'''
        pass

    def Lookup(self, name):
        '''integer tag = Lookup(string name)'''
        pass

    def MasterStatus(self):
        '''integer status = MasterStatus()'''
        pass

    def ParseArgString(self, cmd, alertFlags, args):
        '''ParseArgString(object cmd,integer alertFlags,string args)'''
        pass

    def ParseAttribObject(self, cmd, alertFlags, attribArgs):
        '''ParseAttribObject(object cmd,integer alertFlags,object attribArgs)'''
        pass

    def PostModeBegin(self, cmd, tag, name, args, postEndObj):
        '''PostModeBegin(object cmd,integer tag,string name,string args,object postEndObj)'''
        pass

    def PostModeEnd(self):
        '''PostModeEnd()'''
        pass

    def PostModeRestart(self):
        '''PostModeRestart()'''
        pass

    def PostModeState(self):
        '''PostModeState()'''
        pass

    def ProcessStringFlags(self, flags, string):
        '''(integer newFlags,string afterFlags) = ProcessStringFlags(integer flags,string string)'''
        pass

    def Proto(self, tag, name):
        '''Command object = Proto(integer tag,string name)'''
        pass

    def ProtoFromCommand(self, cmd):
        '''Command object = ProtoFromCommand(object cmd)'''
        pass

    def Query(self, cmd, index):
        '''ValueArray object = Query(object cmd,integer index)'''
        pass

    def QueryArgString(self, cmd, alertFlags, args, includesCmdName):
        '''(ValueArray object,integer queryIndex) = QueryArgString(object cmd,integer alertFlags,string args,integer includesCmdName)'''
        pass

    def RefireBegin(self):
        '''RefireBegin()'''
        pass

    def RefireBlock(self):
        '''string name = RefireBlock()'''
        pass

    def RefireCmd(self):
        '''Command object = RefireCmd()'''
        pass

    def RefireEnd(self):
        '''RefireEnd()'''
        pass

    def RefireState(self):
        '''integer state = RefireState()'''
        pass

    def SandboxAddObject(self, object):
        '''SandboxAddObject(object object)'''
        pass

    def SandboxBegin(self, flags):
        '''SandboxBegin(integer flags)'''
        pass

    def SandboxEnd(self):
        '''SandboxEnd()'''
        pass

    def SandboxFlags(self):
        '''integer flags = SandboxFlags()'''
        pass

    def SandboxObjectByCommand(self, cmd):
        '''Unknown object = SandboxObjectByCommand(object cmd)'''
        pass

    def SandboxObjectByIndex(self, index):
        '''Unknown object = SandboxObjectByIndex(integer index)'''
        pass

    def SandboxObjectCount(self):
        '''integer count = SandboxObjectCount()'''
        pass

    def SandboxObjectLookup(self, guid):
        '''Unknown object = SandboxObjectLookup(string guid)'''
        pass

    def SandboxState(self):
        '''SandboxState()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetIsGlobalInteractionOK(self, isOK):
        '''SetIsGlobalInteractionOK(integer isOK)'''
        pass

    def SetNameSep(self, sep):
        '''SetNameSep(integer sep)'''
        pass

    def SetToggleArgState(self, cmd, state):
        '''SetToggleArgState(object cmd,integer state)'''
        pass

    def Spawn(self, tag, name):
        '''Command object = Spawn(integer tag,string name)'''
        pass

    def SpawnFromCommand(self, cmd):
        '''Command object = SpawnFromCommand(object cmd)'''
        pass

    def SpawnFromString(self, args):
        '''(integer execFlags,integer queryArgIndex,Command object) = SpawnFromString(string args)'''
        pass

    def SpawnImplicitScript(self, definition):
        '''Command object = SpawnImplicitScript(string definition)'''
        pass

    def SpawnUnaliased(self, tag, name):
        '''Command object = SpawnUnaliased(integer tag,string name)'''
        pass

    def Usage(self, cmd):
        '''string buffer = Usage(object cmd)'''
        pass



class Deformer:
    def DeformEltToItem(self, elt):
        '''object = DeformEltToItem(id elt)'''
        pass

    def DeformerChannel(self, item):
        '''integer index = DeformerChannel(object item)'''
        pass

    def DeformerDeformationItem(self, defItem):
        '''item object = DeformerDeformationItem(object defItem)'''
        pass

    def DeformerFlags(self, item):
        '''integer flags = DeformerFlags(object item)'''
        pass

    def GroupDeformer(self, dgroup, chanRead):
        '''GroupDeformer object = GroupDeformer(object dgroup,object chanRead)'''
        pass

    def InvalidateTargets(self, scene):
        '''InvalidateTargets(object scene)'''
        pass

    def ItemToDeformElt(self, item):
        '''id = ItemToDeformElt(object item)'''
        pass

    def MergeChangeState(self, c1, c2):
        '''MergeChangeState(integer c1,integer c2)'''
        pass

    def MeshByIndex(self, defItem, index):
        '''Item object = MeshByIndex(object defItem,integer index)'''
        pass

    def MeshCount(self, defItem):
        '''integer count = MeshCount(object defItem)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def StackTargetByIndex(self, defItem, index):
        '''Item object = StackTargetByIndex(object defItem,integer index)'''
        pass

    def StackTargetCount(self, defItem):
        '''integer count = StackTargetCount(object defItem)'''
        pass



class DirCache:
    def AddClient(self):
        '''AddClient()'''
        pass

    def ArePathsEqual(self, path1, path2):
        '''ArePathsEqual(string path1,string path2)'''
        pass

    def AttributesChanged(self, dirCacheEntry, which, attribute):
        '''AttributesChanged(object dirCacheEntry,integer which,string attribute)'''
        pass

    def CachedThumbnailAsyncCancel(self, ident):
        '''CachedThumbnailAsyncCancel(string ident)'''
        pass

    def CanBeRenamed(self, path):
        '''CanBeRenamed(string path)'''
        pass

    def IsChildOfPath(self, possibleChild, parentToTestAgainsts, orIsSame):
        '''IsChildOfPath(string possibleChild,string parentToTestAgainsts,integer orIsSame)'''
        pass

    def Lookup(self, path):
        '''DirCacheEntry object = Lookup(string path)'''
        pass

    def MakeDirHierarchy(self, path, skipLastPart):
        '''MakeDirHierarchy(string path,integer skipLastPart)'''
        pass

    def MakeUniqueIn(self, object, filename):
        '''string = MakeUniqueIn(object object,string filename)'''
        pass

    def ParseName(self, filename, baseName, baseNameLen, path, pathLen):
        '''ParseName(string filename,byte[] baseName,integer baseNameLen,byte[] path,integer pathLen)'''
        pass

    def PathCompose(self, filename, filenameLen, baseName, path):
        '''PathCompose(byte[] filename,integer filenameLen,string baseName,string path)'''
        pass

    def RemoveClient(self):
        '''RemoveClient()'''
        pass

    def RootByIndex(self, index):
        '''DirCacheEntry object = RootByIndex(integer index)'''
        pass

    def RootCount(self):
        '''integer count = RootCount()'''
        pass

    def RootLock(self):
        '''RootLock()'''
        pass

    def RootUnlock(self):
        '''RootUnlock()'''
        pass

    def ScanForChanges(self, path):
        '''ScanForChanges(string path)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetPosOnDrop(self, path, dest):
        '''SetPosOnDrop(string path,object dest)'''
        pass

    def ToLocalAlias(self, path):
        '''string = ToLocalAlias(byte[] path)'''
        pass



class Drop:
    def Action(self):
        '''(string serverName,integer actionCode) = Action()'''
        pass

    def Destination(self):
        '''Unknown object = Destination()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def Source(self):
        '''(string sourceType,Unknown object) = Source()'''
        pass



class File:
    def AllocRedirect(self):
        '''FileRedirect object = AllocRedirect()'''
        pass

    def AllocReference(self, path):
        '''FileReference object = AllocReference(string path)'''
        pass

    def ArePathsEqual(self, path1, path2):
        '''boolean = ArePathsEqual(string path1,string path2)'''
        pass

    def ComposePath(self, basename, path):
        '''string = ComposePath(string basename,string path)'''
        pass

    def DirDelete(self, filename):
        '''DirDelete(string filename)'''
        pass

    def Execute(self, show, force32):
        '''string argv = Execute(integer show,integer force32)'''
        pass

    def FileCopy(self, srcFilePath, dstFilePath, overwrite):
        '''FileCopy(string srcFilePath,string dstFilePath,integer overwrite)'''
        pass

    def FileDateString(self, filename):
        '''string = FileDateString(string filename)'''
        pass

    def FileDelete(self, filename):
        '''FileDelete(string filename)'''
        pass

    def FileFromURL(self, url):
        '''string = FileFromURL(string url)'''
        pass

    def FileSystemPath(self, name):
        '''string path = FileSystemPath(string name)'''
        pass

    def FileToURL(self, filename):
        '''string = FileToURL(string filename)'''
        pass

    def FindSequenceBounds(self, pattern):
        '''(integer first,integer last) = FindSequenceBounds(string pattern)'''
        pass

    def FindSequencePattern(self, filename):
        '''string = FindSequencePattern(string filename)'''
        pass

    def FromLocal(self, local):
        '''string = FromLocal(string local)'''
        pass

    def GenerateSequenceName(self, pattern, frame):
        '''string = GenerateSequenceName(string pattern,integer frame)'''
        pass

    def IsAbsolutePath(self, path):
        '''boolean = IsAbsolutePath(string path)'''
        pass

    def MakeDirectory(self, path):
        '''MakeDirectory(string path)'''
        pass

    def MakeLegalFilename(self, filename, replaceDot):
        '''MakeLegalFilename(byte[] filename,integer replaceDot)'''
        pass

    def MakeRelative(self, filename, path):
        '''string = MakeRelative(string filename,string path)'''
        pass

    def MakeUnique(self, filename):
        '''string = MakeUnique(string filename)'''
        pass

    def OpenFileWithDefaultApp(self, filename):
        '''OpenFileWithDefaultApp(string filename)'''
        pass

    def ParsePath(self, filename, component):
        '''string = ParsePath(string filename,integer component)'''
        pass

    def PkgCountFiles(self, package):
        '''integer = PkgCountFiles(string package)'''
        pass

    def PkgExtract(self, package, file, dest):
        '''PkgExtract(string package,string file,string dest)'''
        pass

    def PkgExtractAll(self, package, dest, subDir):
        '''PkgExtractAll(string package,string dest,string subDir)'''
        pass

    def PkgFilename(self, package, id):
        '''string = PkgFilename(string package,integer id)'''
        pass

    def PkgHasFile(self, package, file):
        '''PkgHasFile(string package,string file)'''
        pass

    def RenameFile(self, from_str, to_str):
        '''RenameFile(string from_str,string to_str)'''
        pass

    def RevealInFileViewer(self, filename):
        '''RevealInFileViewer(string filename)'''
        pass

    def SetExtension(self, filename, extension):
        '''string = SetExtension(string filename,string extension)'''
        pass

    def TestFileMode(self, filename):
        '''integer mode = TestFileMode(string filename)'''
        pass

    def TestFileType(self, filename):
        '''(boolean,integer type) = TestFileType(string filename)'''
        pass

    def ToLocal(self, neutral):
        '''string = ToLocal(byte[] neutral)'''
        pass

    def ToLocalAlias(self, neutral):
        '''string = ToLocalAlias(string neutral)'''
        pass

    def ValidateLicense(self, product, versionNum):
        '''ValidateLicense(string product,integer versionNum)'''
        pass



class GUID:
    def Class(self, guid):
        '''string = Class(string guid)'''
        pass

    def ClassName(self, guid):
        '''string = ClassName(string guid)'''
        pass

    def Compare(self, guid1, guid2):
        '''integer = Compare(string guid1,string guid2)'''
        pass

    def Fixed(self, guid):
        '''string = Fixed(string guid)'''
        pass

    def GetName(self, guid):
        '''string = GetName(string guid)'''
        pass

    def Translate(self, guidStr):
        '''string = Translate(string guidStr)'''
        pass



class Host:
    def AddServer(self, factory):
        '''AddServer(object factory)'''
        pass

    def DefaultPath(self):
        '''string path = DefaultPath()'''
        pass

    def LookupServer(self, className, name, allowLoad):
        '''Factory object = LookupServer(string className,string name,integer allowLoad)'''
        pass

    def NumServers(self, className):
        '''integer = NumServers(string className)'''
        pass

    def SaverSave(self, filename, format, object, monitor):
        '''SaverSave(string filename,string format,object object,object monitor)'''
        pass

    def SaverVerify(self, format, object, msg):
        '''SaverVerify(string format,object object,object msg)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def ServerByIndex(self, className, index):
        '''Factory object = ServerByIndex(string className,integer index)'''
        pass

    def ServerGetIndex(self, className, name):
        '''integer index = ServerGetIndex(string className,string name)'''
        pass

    def SpawnForTagsOnly(self):
        '''SpawnForTagsOnly()'''
        pass

    def TestServer(self, className, name):
        '''boolean = TestServer(string className,string name)'''
        pass

    def UpdateModule(self, name):
        '''UpdateModule(string name)'''
        pass



class IO:
    def OpenBlockStore(self, filename, format, flags):
        '''(boolean,BlockStore object) = OpenBlockStore(string filename,string format,integer flags)'''
        pass

    def PeekOptions(self):
        '''object = PeekOptions()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetOptions(self, options):
        '''SetOptions(object options)'''
        pass



class Image:
    def Composite(self, dest, source, pos):
        '''Composite(object dest,object source,vector pos)'''
        pass

    def Create(self, width, height, type, maxIndex):
        '''Image object = Create(integer width,integer height,integer type,integer maxIndex)'''
        pass

    def CreateCrop(self, sourceImage, x, y, w, h):
        '''Image object = CreateCrop(object sourceImage,float x,float y,float w,float h)'''
        pass

    def CreateLayered(self, width, height, layerNum):
        '''Unknown object = CreateLayered(integer width,integer height,integer layerNum)'''
        pass

    def DrawLine(self, image, p0, p1, color):
        '''DrawLine(object image,vector p0,vector p1,vector color)'''
        pass

    def Duplicate(self, source, type):
        '''Image object = Duplicate(object source,integer type)'''
        pass

    def ImageGetBuffer(self, sourceImage, type, buf):
        '''ImageGetBuffer(object sourceImage,integer type,data[] buf)'''
        pass

    def Kelvin2RGB(self, kelvin):
        '''vector rgbColor = Kelvin2RGB(float kelvin)'''
        pass

    def Load(self, filePath):
        '''Image object = Load(string filePath)'''
        pass

    def LoadNoCache(self, filePath):
        '''Image object = LoadNoCache(string filePath)'''
        pass

    def RGB2Kelvin(self, rgbColor):
        '''float kelvin = RGB2Kelvin(vector rgbColor)'''
        pass

    def Resample(self, dest, source, hint):
        '''Resample(object dest,object source,integer hint)'''
        pass

    def Save(self, image, filePath, format, monitor):
        '''Save(object image,string filePath,string format,object monitor)'''
        pass

    def SaveLayered(self, layeredImage, filePath, format, monitor):
        '''SaveLayered(object layeredImage,string filePath,string format,object monitor)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class ImageMonitor:
    def RefreshViews(self, imageSource, immediate):
        '''RefreshViews(string imageSource,integer immediate)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def ServerByIndex(self, index):
        '''ImageMonitor object = ServerByIndex(integer index)'''
        pass

    def ServerCount(self):
        '''integer count = ServerCount()'''
        pass

    def ServerLookup(self, name):
        '''ImageMonitor object = ServerLookup(string name)'''
        pass

    def ServerNameByIndex(self, index):
        '''string name = ServerNameByIndex(integer index)'''
        pass

    def ServerUserNameByIndex(self, index):
        '''string name = ServerUserNameByIndex(integer index)'''
        pass

    def SetImage(self, imageSource, image, frameBuffer, bufferIndex, x1, y1, x2, y2, imageProc, processedThumbnail):
        '''SetImage(string imageSource,object image,object frameBuffer,integer bufferIndex,float x1,float y1,float x2,float y2,object imageProc,object processedThumbnail)'''
        pass

    def SourceCount(self):
        '''integer count = SourceCount()'''
        pass

    def SourceNameByIndex(self, index):
        '''string name = SourceNameByIndex(integer index)'''
        pass

    def SourceUserNameByIndex(self, index):
        '''string username = SourceUserNameByIndex(integer index)'''
        pass



class ImageProcessing:
    def Create(self):
        '''ImageProcessing object = Create()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class InputMap:
    def CanEventsCoexist(self, im, event1, event2):
        '''CanEventsCoexist(id im,integer event1,integer event2)'''
        pass

    def ContextCount(self):
        '''integer count = ContextCount()'''
        pass

    def DefineClientTests(self, tester):
        '''DefineClientTests(object tester)'''
        pass

    def DefineCustomEvent(self, event, name, flags):
        '''DefineCustomEvent(integer event,string name,integer flags)'''
        pass

    def DefineGroup(self, group):
        '''DefineGroup(string group)'''
        pass

    def DefineRegion(self, event, name):
        '''DefineRegion(integer event,string name)'''
        pass

    def DefineStandardEvent(self, event, flags):
        '''DefineStandardEvent(integer event,integer flags)'''
        pass

    def Desc(self, im):
        '''string desc = Desc(id im)'''
        pass

    def EventCount(self, im):
        '''integer count = EventCount(id im)'''
        pass

    def EventDesc(self, im, stateName, name, index):
        '''string desc = EventDesc(id im,string stateName,string name,integer index)'''
        pass

    def EventFlags(self, im, index):
        '''integer flags = EventFlags(id im,integer index)'''
        pass

    def EventHelpURL(self, im, stateName, name, index):
        '''string helpURL = EventHelpURL(id im,string stateName,string name,integer index)'''
        pass

    def EventName(self, im, index):
        '''string name = EventName(id im,integer index)'''
        pass

    def EventType(self, im, index):
        '''integer type = EventType(id im,integer index)'''
        pass

    def EventUserName(self, im, stateName, name, index):
        '''string username = EventUserName(id im,string stateName,string name,integer index)'''
        pass

    def FindEvent(self, im, name, type):
        '''integer index = FindEvent(id im,string name,integer type)'''
        pass

    def FindRegion(self, im, name, type):
        '''integer index = FindRegion(id im,string name,integer type)'''
        pass

    def GetMouseMap(self, im):
        '''Unknown object = GetMouseMap(id im)'''
        pass

    def GroupUserName(self, path, depth):
        '''string username = GroupUserName(string path,integer depth)'''
        pass

    def HelpURL(self, im):
        '''string helpURL = HelpURL(id im)'''
        pass

    def Name(self, im):
        '''string name = Name(id im)'''
        pass

    def RefreshContexts(self):
        '''RefreshContexts()'''
        pass

    def RefreshStates(self, flags):
        '''RefreshStates(integer flags)'''
        pass

    def RegionCount(self, im):
        '''integer count = RegionCount(id im)'''
        pass

    def RegionDesc(self, im, stateName, name, index):
        '''string desc = RegionDesc(id im,string stateName,string name,integer index)'''
        pass

    def RegionHelpURL(self, im, stateName, name, index):
        '''string helpURL = RegionHelpURL(id im,string stateName,string name,integer index)'''
        pass

    def RegionName(self, im, i):
        '''string name = RegionName(id im,integer i)'''
        pass

    def RegionType(self, im, i):
        '''integer type = RegionType(id im,integer i)'''
        pass

    def RegionUserName(self, im, stateName, name, index):
        '''string username = RegionUserName(id im,string stateName,string name,integer index)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def StandardEventFlags(self, event):
        '''integer flags = StandardEventFlags(integer event)'''
        pass

    def StandardEventName(self, event):
        '''string name = StandardEventName(integer event)'''
        pass

    def StateCatUserName(self, cat):
        '''string name = StateCatUserName(string cat)'''
        pass

    def StateCount(self, im):
        '''integer count = StateCount(id im)'''
        pass

    def StateUIFallbacksCount(self, stateName):
        '''integer count = StateUIFallbacksCount(string stateName)'''
        pass

    def StateUIFallbacksName(self, stateName, index):
        '''string name = StateUIFallbacksName(string stateName,integer index)'''
        pass

    def StateUIListCatCount(self):
        '''integer count = StateUIListCatCount()'''
        pass

    def StateUIListCatName(self, index):
        '''string name = StateUIListCatName(integer index)'''
        pass

    def StateUIListCount(self, cat):
        '''integer count = StateUIListCount(string cat)'''
        pass

    def StateUIListName(self, cat, index):
        '''string name = StateUIListName(string cat,integer index)'''
        pass

    def StateUITestEvent(self, im, stateName, eventID):
        '''StateUITestEvent(id im,string stateName,integer eventID)'''
        pass

    def StateUITestRegion(self, im, stateName, regionID):
        '''StateUITestRegion(id im,string stateName,integer regionID)'''
        pass

    def StateUserName(self, state):
        '''string name = StateUserName(string state)'''
        pass

    def TestState(self, im, state):
        '''integer priority = TestState(id im,string state)'''
        pass

    def UpdateDeviceInstance(self, name):
        '''UpdateDeviceInstance(string name)'''
        pass

    def UpdateDeviceList(self):
        '''UpdateDeviceList()'''
        pass

    def UserName(self, im):
        '''string username = UserName(id im)'''
        pass



class Interviewer:
    def Arm(self, serverName, target):
        '''Arm(string serverName,integer target)'''
        pass

    def ClearDismissTimer(self, serverName):
        '''ClearDismissTimer(string serverName)'''
        pass

    def Disarm(self, serverName, allowRearm):
        '''Disarm(string serverName,integer allowRearm)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def WasFired(self, serverName):
        '''boolean = WasFired(string serverName)'''
        pass



class Layer:
    def Bounds(self, index):
        '''(vector min,vector max) = Bounds(integer index)'''
        pass

    def ClearMark(self, item):
        '''ClearMark(object item)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def CurrentDeformer(self, meshItem):
        '''string name = CurrentDeformer(object meshItem)'''
        pass

    def CurrentMap(self, type):
        '''string name = CurrentMap(integer type)'''
        pass

    def CurveSmoothAngle(self, index):
        '''float angle = CurveSmoothAngle(integer index)'''
        pass

    def Flags(self, index):
        '''integer flags = Flags(integer index)'''
        pass

    def IsProcedural(self, index):
        '''IsProcedural(integer index)'''
        pass

    def Item(self, index):
        '''Item object = Item(integer index)'''
        pass

    def ItemLookup(self, mode, item):
        '''integer index = ItemLookup(integer mode,object item)'''
        pass

    def LayerChild(self, index, childNumber):
        '''integer childIndex = LayerChild(integer index,integer childNumber)'''
        pass

    def LayerChildCount(self, index):
        '''integer num = LayerChildCount(integer index)'''
        pass

    def LayerClip(self, index):
        '''Item object = LayerClip(integer index)'''
        pass

    def LayerClipCount(self):
        '''integer num = LayerClipCount()'''
        pass

    def LayerEdge(self, mode, index):
        '''Unknown object = LayerEdge(integer mode,integer index)'''
        pass

    def LayerEdgeCount(self, mode):
        '''integer num = LayerEdgeCount(integer mode)'''
        pass

    def LayerMaterial(self, index):
        '''Item object = LayerMaterial(integer index)'''
        pass

    def LayerMaterialCount(self):
        '''integer num = LayerMaterialCount()'''
        pass

    def LayerParent(self, index):
        '''integer parentIndex = LayerParent(integer index)'''
        pass

    def LayerPart(self, index):
        '''string part = LayerPart(integer index)'''
        pass

    def LayerPartCount(self):
        '''integer num = LayerPartCount()'''
        pass

    def LayerPoly(self, mode, index):
        '''Unknown object = LayerPoly(integer mode,integer index)'''
        pass

    def LayerPolyCount(self, mode):
        '''integer num = LayerPolyCount(integer mode)'''
        pass

    def LayerSelSet(self, type, index):
        '''string selSet = LayerSelSet(integer type,integer index)'''
        pass

    def LayerSelSetCount(self, type):
        '''integer num = LayerSelSetCount(integer type)'''
        pass

    def LayerTagTexture(self, layer, type, tag, index):
        '''Item object = LayerTagTexture(integer layer,integer type,string tag,integer index)'''
        pass

    def LayerTagTextureCount(self, layer, type, tag):
        '''integer num = LayerTagTextureCount(integer layer,integer type,string tag)'''
        pass

    def LayerTexture(self, layer, index):
        '''Item object = LayerTexture(integer layer,integer index)'''
        pass

    def LayerTextureCount(self, layer):
        '''integer num = LayerTextureCount(integer layer)'''
        pass

    def LayerVMap(self, index):
        '''Unknown object = LayerVMap(integer index)'''
        pass

    def LayerVMapCount(self):
        '''integer num = LayerVMapCount()'''
        pass

    def LayerVertex(self, mode, index):
        '''Unknown object = LayerVertex(integer mode,integer index)'''
        pass

    def LayerVertexCount(self, mode):
        '''integer num = LayerVertexCount(integer mode)'''
        pass

    def Mesh(self, index):
        '''Mesh object = Mesh(integer index)'''
        pass

    def Name(self, index):
        '''string name = Name(integer index)'''
        pass

    def NameLookup(self, mode, name):
        '''integer index = NameLookup(integer mode,string name)'''
        pass

    def PatchSubdivision(self, index):
        '''integer level = PatchSubdivision(integer index)'''
        pass

    def Pivot(self, index):
        '''float pivot = Pivot(integer index)'''
        pass

    def ScanAllocate(self, flags):
        '''LayerScan object = ScanAllocate(integer flags)'''
        pass

    def ScanAllocateItem(self, item, flags):
        '''LayerScan object = ScanAllocateItem(object item,integer flags)'''
        pass

    def Scene(self):
        '''Scene object = Scene()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetMark(self, item):
        '''SetMark(object item)'''
        pass

    def SetScene(self, scene):
        '''SetScene(object scene)'''
        pass

    def Slot(self, index):
        '''integer slot = Slot(integer index)'''
        pass

    def SplinePatchSubdivision(self, index):
        '''integer level = SplinePatchSubdivision(integer index)'''
        pass

    def TestMark(self, item):
        '''integer = TestMark(object item)'''
        pass

    def XfrmAllocate(self, toolVec):
        '''TransformScan object = XfrmAllocate(object toolVec)'''
        pass



class Listener:
    def AddListener(self, object):
        '''AddListener(object object)'''
        pass

    def RemoveListener(self, object):
        '''RemoveListener(object object)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class Log:
    def AcquireMonitor(self):
        '''object = AcquireMonitor()'''
        pass

    def CreateEntryInfoBlock(self, type, blockName):
        '''LogEntry object = CreateEntryInfoBlock(integer type,string blockName)'''
        pass

    def CreateEntryMessage(self, type, message):
        '''LogEntry object = CreateEntryMessage(integer type,string message)'''
        pass

    def CreateEntryMessageFromMsgObj(self, msgObj):
        '''LogEntry object = CreateEntryMessageFromMsgObj(object msgObj)'''
        pass

    def CreateEntryPaired(self, type):
        '''LogEntry object = CreateEntryPaired(integer type)'''
        pass

    def DebugLogOutput(self, level, line):
        '''DebugLogOutput(integer level,string line)'''
        pass

    def DebugLogOutputSys(self, level, logSystem, line):
        '''DebugLogOutputSys(integer level,string logSystem,string line)'''
        pass

    def EnableLogging(self, systemName, state):
        '''EnableLogging(string systemName,integer state)'''
        pass

    def ExceptionBlockCollect(self):
        '''Message object = ExceptionBlockCollect()'''
        pass

    def ExceptionBlockStart(self):
        '''ExceptionBlockStart()'''
        pass

    def ExceptionMessage(self, error, flags):
        '''object = ExceptionMessage(integer error,integer flags)'''
        pass

    def InfoBlockByIndex(self, index):
        '''LogInfoBlock object = InfoBlockByIndex(integer index)'''
        pass

    def InfoBlockCount(self):
        '''integer count = InfoBlockCount()'''
        pass

    def InfoBlockFieldGetParts(self, name):
        '''(string group,string sub) = InfoBlockFieldGetParts(string name)'''
        pass

    def InfoBlockFieldsAreSameGroup(self, name1, name2):
        '''boolean = InfoBlockFieldsAreSameGroup(string name1,string name2)'''
        pass

    def InfoBlockLookup(self, name):
        '''LogInfoBlock object = InfoBlockLookup(string name)'''
        pass

    def IsLoggingEnabled(self, systemName):
        '''boolean = IsLoggingEnabled(string systemName)'''
        pass

    def MasterSubSystem(self):
        '''Log object = MasterSubSystem()'''
        pass

    def ReplaceEntryMessage(self, logEntry, type, msg):
        '''ReplaceEntryMessage(object logEntry,integer type,string msg)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetMonitor(self, monitor):
        '''SetMonitor(object monitor)'''
        pass

    def SubSystemByIndex(self, index):
        '''Log object = SubSystemByIndex(integer index)'''
        pass

    def SubSystemCount(self):
        '''integer count = SubSystemCount()'''
        pass

    def SubSystemLookup(self, name):
        '''Log object = SubSystemLookup(string name)'''
        pass



class Mesh:
    def ConvertMesh(self, triGroupObj, meshObj):
        '''ConvertMesh(object triGroupObj,object meshObj)'''
        pass

    def CreateMesh(self):
        '''Mesh object = CreateMesh()'''
        pass

    def CreateSlice(self):
        '''PolygonSlice object = CreateSlice()'''
        pass

    def CreateSolidDrill(self):
        '''SolidDrill object = CreateSolidDrill()'''
        pass

    def CurveGroupFromMesh(self, mesh, xfrm):
        '''Unknown object = CurveGroupFromMesh(object mesh,matrix xfrm)'''
        pass

    def IsMeshProcedural(self, item):
        '''boolean = IsMeshProcedural(object item)'''
        pass

    def ItemFromMesh(self, mesh):
        '''Item object = ItemFromMesh(object mesh)'''
        pass

    def MeshFromSurface(self, meshObj, surfItem, surfObj):
        '''MeshFromSurface(object meshObj,object surfItem,object surfObj)'''
        pass

    def MeshFromTriGroup(self, meshObj, triGroupObj):
        '''MeshFromTriGroup(object meshObj,object triGroupObj)'''
        pass

    def ModeCompose(self, set, clear):
        '''integer mode = ModeCompose(string set,string clear)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SurfaceFromMesh(self, mesh, meshItem):
        '''Surface object = SurfaceFromMesh(object mesh,object meshItem)'''
        pass

    def SurfaceToTriGroup(self, triGroupObj, surfObj):
        '''SurfaceToTriGroup(object triGroupObj,object surfObj)'''
        pass

    def Tessellate(self, meshTess, meshSource, xfrm, flags):
        '''Tessellate(object meshTess,object meshSource,matrix xfrm,integer flags)'''
        pass

    def TriGroupTransform(self, triGroupObj):
        '''matrix xfrm = TriGroupTransform(object triGroupObj)'''
        pass

    def VMapDimension(self, type):
        '''integer dimension = VMapDimension(integer type)'''
        pass

    def VMapIsContinuous(self, type):
        '''boolean = VMapIsContinuous(integer type)'''
        pass

    def VMapIsEdgeMap(self, type):
        '''boolean = VMapIsEdgeMap(integer type)'''
        pass

    def VMapLookupName(self, type):
        '''string name = VMapLookupName(integer type)'''
        pass

    def VMapLookupType(self, name):
        '''integer type = VMapLookupType(string name)'''
        pass

    def VMapZeroDefault(self, type):
        '''boolean = VMapZeroDefault(integer type)'''
        pass

    def ValidateMetaData(self, mesh, name):
        '''Unknown object = ValidateMetaData(object mesh,string name)'''
        pass



class Message:
    def Allocate(self):
        '''Message object = Allocate()'''
        pass

    def ArgTypeDesc(self, argType):
        '''string = ArgTypeDesc(string argType)'''
        pass

    def ArgTypeOptionDesc(self, argType, option):
        '''string = ArgTypeOptionDesc(string argType,string option)'''
        pass

    def ArgTypeOptionUserName(self, argType, option):
        '''string = ArgTypeOptionUserName(string argType,string option)'''
        pass

    def ArgTypeUserName(self, argType):
        '''string = ArgTypeUserName(string argType)'''
        pass

    def Duplicate(self, msg):
        '''Message object = Duplicate(object msg)'''
        pass

    def MessageText(self, msg):
        '''string = MessageText(object msg)'''
        pass

    def MessageTextRich(self, msg):
        '''string = MessageTextRich(object msg)'''
        pass

    def RawText(self, table, msg):
        '''string text = RawText(string table,string msg)'''
        pass

    def RawTextRich(self, table, msg):
        '''string text = RawTextRich(string table,string msg)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def StringLookup(self, table, ident):
        '''string text = StringLookup(string table,string ident)'''
        pass

    def StripRichText(self, string):
        '''string stripped = StripRichText(string string)'''
        pass



class Network:
    def OneOffHostListAdd(self, hostname, ip, port):
        '''OneOffHostListAdd(string hostname,integer ip,integer port)'''
        pass

    def OneOffHostListRemove(self, hostname, ip, port):
        '''OneOffHostListRemove(string hostname,integer ip,integer port)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class Nodal:
    def AddSampleChan(self, eval, item, chanIndex, type):
        '''(integer,integer idxArray) = AddSampleChan(object eval,object item,integer chanIndex,integer type)'''
        pass

    def AddSampleChanName(self, eval, item, chanName, type):
        '''(integer,integer idxArray) = AddSampleChanName(object eval,object item,string chanName,integer type)'''
        pass

    def AnyDrivenChans(self, count):
        '''(integer,integer chans) = AnyDrivenChans(integer count)'''
        pass

    def GetFloat(self, etor, index, orig):
        '''(float,integer idxArray) = GetFloat(object etor,integer index,float orig)'''
        pass

    def GetInt(self, etor, index, orig):
        '''(integer,integer idxArray) = GetInt(object etor,integer index,integer orig)'''
        pass

    def GetValue(self, etor, index, orig):
        '''(pointer,integer idxArray) = GetValue(object etor,integer index,pointer orig)'''
        pass

    def IsDriven(self, item, chanIndex):
        '''integer = IsDriven(object item,integer chanIndex)'''
        pass

    def IsDrivenName(self, item, chanName):
        '''integer = IsDrivenName(object item,string chanName)'''
        pass



class NotifySys:
    def ByIndex(self, index):
        '''Notifier object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Lookup(self, name, args):
        '''Notifier object = Lookup(string name,string args)'''
        pass

    def NameByIndex(self, index):
        '''string name = NameByIndex(integer index)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def Spawn(self, name, args):
        '''Notifier object = Spawn(string name,string args)'''
        pass



class Packet:
    def AddPacket(self, vtype, name, flags):
        '''AddPacket(object vtype,string name,integer flags)'''
        pass

    def CreateVectorType(self, category):
        '''VectorType object = CreateVectorType(string category)'''
        pass

    def FastPacket(self, vector, offset):
        '''pointer = FastPacket(object vector,integer offset)'''
        pass

    def Lookup(self, category, name):
        '''integer offset = Lookup(string category,string name)'''
        pass

    def Name(self, category, offset):
        '''string name = Name(string category,integer offset)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class Particle:
    def EnumParticleFeatures(self, item, visitor):
        '''EnumParticleFeatures(object item,object visitor)'''
        pass

    def EnumeratorEvaluate(self, attr, index):
        '''ReplicatorEnumerator object = EnumeratorEvaluate(object attr,integer index)'''
        pass

    def EnumeratorPrepare(self, eval, replItem):
        '''integer index = EnumeratorPrepare(object eval,object replItem)'''
        pass

    def FeatureIdent(self):
        '''string ident = FeatureIdent()'''
        pass

    def FeatureOffset(self):
        '''integer offset = FeatureOffset()'''
        pass

    def GetReplicatorEnumerator(self, replicatorItem):
        '''ReplicatorEnumerator object = GetReplicatorEnumerator(object replicatorItem)'''
        pass

    def ItemToParticle(self, item, chanRead):
        '''Unknown object = ItemToParticle(object item,object chanRead)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def TriGroupBlend(self, triGroup0, triGroup1, blend):
        '''TriGroupBlend(object triGroup0,object triGroup1,float blend)'''
        pass

    def TriGroupToParticle(self, triGroup):
        '''Unknown object = TriGroupToParticle(object triGroup)'''
        pass



class Persistence:
    def AddValue(self, typeName):
        '''AddValue(string typeName)'''
        pass

    def Configure(self, name, obj):
        '''Configure(string name,object obj)'''
        pass

    def End(self):
        '''PersistentEntry object = End()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def Start(self, name, type):
        '''Start(string name,integer type)'''
        pass



class Platform:
    def AppBuild(self):
        '''integer build = AppBuild()'''
        pass

    def AppName(self):
        '''string name = AppName()'''
        pass

    def AppUsername(self):
        '''string name = AppUsername()'''
        pass

    def AppVersion(self):
        '''integer version = AppVersion()'''
        pass

    def AppVersionMajor(self):
        '''integer version = AppVersionMajor()'''
        pass

    def AppVersionMinor(self):
        '''integer version = AppVersionMinor()'''
        pass

    def AppVersionSP(self):
        '''integer version = AppVersionSP()'''
        pass

    def CancelDoWhenUserIsIdle(self, visitor, flags):
        '''CancelDoWhenUserIsIdle(object visitor,integer flags)'''
        pass

    def DoWhenUserIsIdle(self, visitor, flags):
        '''DoWhenUserIsIdle(object visitor,integer flags)'''
        pass

    def ExpiresIn(self):
        '''integer daysLeft = ExpiresIn()'''
        pass

    def ImportPathByIndex(self, index):
        '''string path = ImportPathByIndex(integer index)'''
        pass

    def ImportPathCount(self):
        '''integer index = ImportPathCount()'''
        pass

    def IsApp64Bit(self):
        '''boolean = IsApp64Bit()'''
        pass

    def IsAppActive(self):
        '''boolean = IsAppActive()'''
        pass

    def IsHeadless(self):
        '''boolean = IsHeadless()'''
        pass

    def IsSafeMode(self):
        '''boolean = IsSafeMode()'''
        pass

    def IsUserIdle(self):
        '''boolean = IsUserIdle()'''
        pass

    def LicensedTo(self):
        '''string licensee = LicensedTo()'''
        pass

    def NumLicenses(self):
        '''integer licenses = NumLicenses()'''
        pass

    def OSName(self):
        '''string name = OSName()'''
        pass

    def OSType(self):
        '''integer type = OSType()'''
        pass

    def OSVersion(self):
        '''string version = OSVersion()'''
        pass

    def PathByIndex(self, index):
        '''string path = PathByIndex(integer index)'''
        pass

    def PathCount(self):
        '''integer count = PathCount()'''
        pass

    def PathNameByIndex(self, index):
        '''string name = PathNameByIndex(integer index)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SerialNumber(self):
        '''string serial = SerialNumber()'''
        pass

    def SessionStage(self):
        '''integer stage = SessionStage()'''
        pass

    def TimerCancel(self, visitor, idleFlags):
        '''TimerCancel(object visitor,integer idleFlags)'''
        pass

    def TimerStart(self, visitor, milliseconds, idleFlags):
        '''TimerStart(object visitor,integer milliseconds,integer idleFlags)'''
        pass



class PresetBrowser:
    def GetSpecialSelModePath(self, identifier):
        '''string = GetSpecialSelModePath(string identifier)'''
        pass

    def IsViewportVisible(self, identifier, hash):
        '''boolean = IsViewportVisible(string identifier,string hash)'''
        pass

    def RecognizeFile(self, path, flags):
        '''(string serverName,string category) = RecognizeFile(string path,integer flags)'''
        pass

    def RecognizeFileForce(self, path, flags):
        '''(string serverName,string category) = RecognizeFileForce(string path,integer flags)'''
        pass

    def Rescan(self, path):
        '''Rescan(string path)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def ServerByIndex(self, index):
        '''PresetType object = ServerByIndex(integer index)'''
        pass

    def ServerCount(self):
        '''integer count = ServerCount()'''
        pass

    def ServerLookup(self, name):
        '''PresetType object = ServerLookup(string name)'''
        pass

    def ServerNameByIndex(self, index):
        '''string name = ServerNameByIndex(integer index)'''
        pass

    def ServerUserNameByIndex(self, index):
        '''string name = ServerUserNameByIndex(integer index)'''
        pass

    def SetSpecialSelModePath(self, identifier, path, asInteractive):
        '''SetSpecialSelModePath(string identifier,string path,integer asInteractive)'''
        pass

    def SubtypeFromIdentifier(self, identifier):
        '''integer subtype = SubtypeFromIdentifier(string identifier)'''
        pass

    def UpdateIdentifierState(self, identifier, path):
        '''UpdateIdentifierState(string identifier,string path)'''
        pass



class PresetDestination:
    def ApplyMeshPresetToMeshPD(self, predest, filepath):
        '''ApplyMeshPresetToMeshPD(object predest,string filepath)'''
        pass

    def ApplyProfilePDToMesh(self, predest, tolerance, freeze, axis, mesh):
        '''ApplyProfilePDToMesh(object predest,float tolerance,integer freeze,integer axis,object mesh)'''
        pass

    def CreateMeshLayerPD(self, mesh, shadeItem):
        '''Unknown object = CreateMeshLayerPD(object mesh,object shadeItem)'''
        pass

    def Profile1DPDFromPath(self, filepath):
        '''Unknown object = Profile1DPDFromPath(string filepath)'''
        pass

    def Profile2DPDFromPath(self, filepath):
        '''Unknown object = Profile2DPDFromPath(string filepath)'''
        pass

    def ShaderPDFromItem(self, item):
        '''Unknown object = ShaderPDFromItem(object item)'''
        pass



class Preview:
    def CreatePreview(self):
        '''Preview object = CreatePreview()'''
        pass

    def GetMeshPreview(self, item, width, height):
        '''Unknown object = GetMeshPreview(object item,integer width,integer height)'''
        pass



class Render:
    def FrameDelete(self, slotIndex):
        '''FrameDelete(integer slotIndex)'''
        pass

    def FrameRecall(self, slotIndex, passIndex, monitor):
        '''FrameBuffer object = FrameRecall(integer slotIndex,integer passIndex,object monitor)'''
        pass

    def FrameRecallStats(self, slotIndex):
        '''RenderStats object = FrameRecallStats(integer slotIndex)'''
        pass

    def FrameRecallThumbnail(self, slotIndex):
        '''Image object = FrameRecallThumbnail(integer slotIndex)'''
        pass

    def FrameRenderPassCount(self, slotIndex):
        '''integer numPasses = FrameRenderPassCount(integer slotIndex)'''
        pass

    def FrameRenderPassInfo(self, slotIndex, passIndex, name):
        '''(integer width,integer height,integer outputCount,integer isStereo,integer eyeDisplay,integer stereoComposite) = FrameRenderPassInfo(integer slotIndex,integer passIndex,byte[] name)'''
        pass

    def FrameSaveImage(self, framebuffer, bufferIndex, filename, format, message, monitor):
        '''FrameSaveImage(object framebuffer,integer bufferIndex,string filename,string format,object message,object monitor)'''
        pass

    def FrameSaveLayered(self, framebuffer, filename, format, message, monitor):
        '''FrameSaveLayered(object framebuffer,string filename,string format,object message,object monitor)'''
        pass

    def FrameSavePassLayered(self, framebuffer, filename, format, message, monitor):
        '''FrameSavePassLayered(object framebuffer,string filename,string format,object message,object monitor)'''
        pass

    def FrameSavePassesAsImages(self, slotIndex, filename, format, message, monitor):
        '''FrameSavePassesAsImages(integer slotIndex,string filename,string format,object message,object monitor)'''
        pass

    def FrameSavePassesAsLayeredImages(self, slotIndex, filename, format, message, monitor):
        '''FrameSavePassesAsLayeredImages(integer slotIndex,string filename,string format,object message,object monitor)'''
        pass

    def FrameStore(self, frameBuffer, writePixels):
        '''FrameStore(object frameBuffer,integer writePixels)'''
        pass

    def FrameStoreStats(self, slotIndex, stats):
        '''FrameStoreStats(integer slotIndex,object stats)'''
        pass

    def FrameStoreThumbnail(self, slotIndex, image):
        '''FrameStoreThumbnail(integer slotIndex,object image)'''
        pass

    def FrameTestRecall(self, slotIndex, passIndex):
        '''boolean = FrameTestRecall(integer slotIndex,integer passIndex)'''
        pass

    def JobAbort(self):
        '''JobAbort()'''
        pass

    def JobCleanup(self, clearJob):
        '''JobCleanup(integer clearJob)'''
        pass

    def JobCurrent(self):
        '''RenderJob object = JobCurrent()'''
        pass

    def JobIsSlave(self):
        '''integer = JobIsSlave()'''
        pass

    def JobRenderOutputCount(self):
        '''integer count = JobRenderOutputCount()'''
        pass

    def JobRenderOutputName(self, index):
        '''string name = JobRenderOutputName(integer index)'''
        pass

    def JobRenderOutputType(self, index):
        '''integer type = JobRenderOutputType(integer index)'''
        pass

    def JobSetCurrent(self, job):
        '''JobSetCurrent(object job)'''
        pass

    def JobStart(self):
        '''JobStart()'''
        pass

    def JobStats(self):
        '''object = JobStats()'''
        pass

    def JobStatus(self):
        '''JobStatus()'''
        pass

    def RefreshProgressImageMetrics(self):
        '''RefreshProgressImageMetrics()'''
        pass

    def RenderEffectFromRenderType(self, type):
        '''string effectName = RenderEffectFromRenderType(integer type)'''
        pass

    def RenderEffectToType(self, effect):
        '''(integer type,integer size) = RenderEffectToType(string effect)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def UpdateProgressImage(self):
        '''UpdateProgressImage()'''
        pass



class RenderCache:
    def CreateRenderCache(self, createFlags):
        '''RenderCache object = CreateRenderCache(integer createFlags)'''
        pass



class Scene:
    def AllocEmptyCollection(self):
        '''ItemCollection object = AllocEmptyCollection()'''
        pass

    def ChannelVectorSize(self, mode):
        '''integer size = ChannelVectorSize(integer mode)'''
        pass

    def ChannelVectorTextHints(self):
        '''hints hints = ChannelVectorTextHints()'''
        pass

    def CloseCollection(self, collection, mode):
        '''CloseCollection(object collection,integer mode)'''
        pass

    def CreateScene(self):
        '''Scene object = CreateScene()'''
        pass

    def DestroyScene(self, scene):
        '''DestroyScene(object scene)'''
        pass

    def GetMeshInstSourceItem(self, inst):
        '''Item object = GetMeshInstSourceItem(object inst)'''
        pass

    def GetReplicatorEnumerator(self, replicatorItem):
        '''ReplicatorEnumerator object = GetReplicatorEnumerator(object replicatorItem)'''
        pass

    def ItemGraphCollection(self, collection, type, graph, fwd):
        '''ItemGraphCollection(object collection,integer type,string graph,integer fwd)'''
        pass

    def ItemSubTypeByIndex(self, type, index):
        '''string subtype = ItemSubTypeByIndex(integer type,integer index)'''
        pass

    def ItemSubTypeCount(self, type):
        '''integer count = ItemSubTypeCount(integer type)'''
        pass

    def ItemTypeByIndex(self, index):
        '''integer type = ItemTypeByIndex(integer index)'''
        pass

    def ItemTypeCommonChannels(self, item1, item2):
        '''integer count = ItemTypeCommonChannels(object item1,object item2)'''
        pass

    def ItemTypeCount(self):
        '''integer = ItemTypeCount()'''
        pass

    def ItemTypeGetTag(self, type, tag, super):
        '''string value = ItemTypeGetTag(integer type,string tag,integer super)'''
        pass

    def ItemTypeLookup(self, name):
        '''integer type = ItemTypeLookup(string name)'''
        pass

    def ItemTypeName(self, type):
        '''string name = ItemTypeName(integer type)'''
        pass

    def ItemTypeSuper(self, type):
        '''integer super = ItemTypeSuper(integer type)'''
        pass

    def ItemTypeSupportsInterface(self, type, guid):
        '''boolean = ItemTypeSupportsInterface(integer type,string guid)'''
        pass

    def ItemTypeTest(self, what, isA):
        '''boolean = ItemTypeTest(integer what,integer isA)'''
        pass

    def LoadImage(self, scene, path, monitor):
        '''Item object = LoadImage(object scene,string path,object monitor)'''
        pass

    def MeshInstanceByIndex(self, mesh, index):
        '''Item object = MeshInstanceByIndex(object mesh,integer index)'''
        pass

    def MeshInstanceCount(self, mesh):
        '''integer = MeshInstanceCount(object mesh)'''
        pass

    def Root(self):
        '''Scene object = Root()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SubSceneAdd(self, scene, other, refItems):
        '''SubSceneAdd(object scene,object other,integer refItems)'''
        pass

    def SubSceneLoad(self, scene, path, monitor):
        '''Scene object = SubSceneLoad(object scene,string path,object monitor)'''
        pass



class ScriptSys:
    def ByIndex(self, index):
        '''ScriptManager object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Desc(self, manager):
        '''string name = Desc(object manager)'''
        pass

    def KitByIndex(self, index, visible):
        '''Kit object = KitByIndex(integer index,integer visible)'''
        pass

    def KitCount(self, visible):
        '''integer count = KitCount(integer visible)'''
        pass

    def KitLookup(self, name):
        '''Kit object = KitLookup(string name)'''
        pass

    def Lookup(self, name):
        '''ScriptManager object = Lookup(string name)'''
        pass

    def NameByIndex(self, index):
        '''string name = NameByIndex(integer index)'''
        pass

    def ResolveAlias(self, alias):
        '''string path = ResolveAlias(string alias)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def UserName(self, manager):
        '''string name = UserName(object manager)'''
        pass

    def UserValueByIndex(self, index):
        '''UserValue object = UserValueByIndex(integer index)'''
        pass

    def UserValueCount(self):
        '''integer count = UserValueCount()'''
        pass

    def UserValueLookup(self, name):
        '''UserValue object = UserValueLookup(string name)'''
        pass



class Selection:
    def AbortBatch(self):
        '''AbortBatch()'''
        pass

    def Allocate(self, name):
        '''SelectionType object = Allocate(string name)'''
        pass

    def ByIndex(self, type, idx):
        '''pointer = ByIndex(integer type,integer idx)'''
        pass

    def Clear(self, type):
        '''Clear(integer type)'''
        pass

    def Count(self, type):
        '''integer = Count(integer type)'''
        pass

    def CurrentSubTypes(self, type, sub, len):
        '''integer num = CurrentSubTypes(integer type,unsigned[] sub,integer len)'''
        pass

    def CurrentType(self, types):
        '''integer = CurrentType(unsigned[] types)'''
        pass

    def Deselect(self, type, packet):
        '''Deselect(integer type,pointer packet)'''
        pass

    def Drop(self, type):
        '''Drop(integer type)'''
        pass

    def EndBatch(self):
        '''EndBatch()'''
        pass

    def GetTime(self):
        '''float = GetTime()'''
        pass

    def LookupName(self, type):
        '''string = LookupName(integer type)'''
        pass

    def LookupType(self, name):
        '''integer = LookupType(string name)'''
        pass

    def Recent(self, type):
        '''pointer = Recent(integer type)'''
        pass

    def Remove(self, type, packet):
        '''Remove(integer type,pointer packet)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def Select(self, type, packet):
        '''Select(integer type,pointer packet)'''
        pass

    def SetTime(self, time):
        '''SetTime(float time)'''
        pass

    def StartBatch(self):
        '''StartBatch()'''
        pass

    def State(self, type, packet):
        '''integer = State(integer type,pointer packet)'''
        pass

    def Test(self, type, packet):
        '''boolean = Test(integer type,pointer packet)'''
        pass

    def Toggle(self, type, packet):
        '''Toggle(integer type,pointer packet)'''
        pass



class Shader:
    def CollectMaterials(self, collection):
        '''CollectMaterials(object collection)'''
        pass

    def ColorBlendValue(self, c1, c2, opa, mode):
        '''vector c = ColorBlendValue(vector c1,vector c2,float opa,integer mode)'''
        pass

    def ComputeFresnel(self, inRay, normalRay, normReflAmt):
        '''float = ComputeFresnel(vector inRay,vector normalRay,float normReflAmt)'''
        pass

    def MeshShaderAccessor(self, meshItem):
        '''Shader object = MeshShaderAccessor(object meshItem)'''
        pass

    def NextRandom(self, vector):
        '''float = NextRandom(object vector)'''
        pass

    def PoissonOffset(self, vector):
        '''(float u,float v) = PoissonOffset(object vector)'''
        pass

    def PolyShaderAccessor(self, meshItem, polyID):
        '''Shader object = PolyShaderAccessor(object meshItem,id polyID)'''
        pass

    def RussianRoulette(self, vector, importance):
        '''float = RussianRoulette(object vector,float importance)'''
        pass

    def SampleCloud(self, sample):
        '''SampleCloud object = SampleCloud(object sample)'''
        pass

    def ScalarBlendValue(self, v1, v2, opa, mode):
        '''float = ScalarBlendValue(float v1,float v2,float opa,integer mode)'''
        pass

    def SquareToCircle(self, x, y):
        '''SquareToCircle(float[] x,float[] y)'''
        pass



class StdDialog:
    def AsyncMonitorAllocate(self, system, title):
        '''AsyncMonitor object = AsyncMonitorAllocate(string system,string title)'''
        pass

    def AsyncMonitorAllocateWithoutAbort(self, system, title):
        '''Unknown object = AsyncMonitorAllocateWithoutAbort(string system,string title)'''
        pass

    def AsyncMonitorLookup(self, ident):
        '''Monitor object = AsyncMonitorLookup(string ident)'''
        pass

    def AsyncMonitorRelease(self, monitor):
        '''AsyncMonitorRelease(object monitor)'''
        pass

    def AsyncMonitorSubAllocate(self, parent, title):
        '''AsyncMonitor object = AsyncMonitorSubAllocate(object parent,string title)'''
        pass

    def AsyncMonitorSystemByIndex(self, index):
        '''AsyncMonitorSystem object = AsyncMonitorSystemByIndex(integer index)'''
        pass

    def AsyncMonitorSystemCount(self):
        '''integer count = AsyncMonitorSystemCount()'''
        pass

    def AsyncMonitorSystemLookup(self, name):
        '''AsyncMonitorSystem object = AsyncMonitorSystemLookup(string name)'''
        pass

    def FileDialog(self, dlgObj):
        '''FileDialog(object dlgObj)'''
        pass

    def MessageAllocate(self):
        '''Message object = MessageAllocate()'''
        pass

    def MessageOpen(self, message, title, helpURL, cookie):
        '''MessageOpen(object message,string title,string helpURL,string cookie)'''
        pass

    def MonitorAllocate(self, title):
        '''Monitor object = MonitorAllocate(string title)'''
        pass

    def MonitorRelease(self):
        '''MonitorRelease()'''
        pass

    def MonitorReleaseObj(self, monitor):
        '''MonitorReleaseObj(object monitor)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class Tableau:
    def AllocVertex(self):
        '''TableauVertex object = AllocVertex()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def VertexFromFeatures(self, surfObj, vertex):
        '''VertexFromFeatures(object surfObj,object vertex)'''
        pass



class TextEncoding:
    def Allocate(self):
        '''TextEncoding object = Allocate()'''
        pass



class Thread:
    def CleanupThread(self):
        '''CleanupThread()'''
        pass

    def CreateCS(self):
        '''ThreadMutex object = CreateCS()'''
        pass

    def CreateGroup(self):
        '''ThreadGroup object = CreateGroup()'''
        pass

    def CreateMutex(self):
        '''ThreadMutex object = CreateMutex()'''
        pass

    def CreateSlot(self, size, client):
        '''ThreadSlot object = CreateSlot(integer size,object client)'''
        pass

    def InitThread(self):
        '''InitThread()'''
        pass

    def IsMainThread(self):
        '''integer = IsMainThread()'''
        pass

    def NumProcs(self):
        '''integer = NumProcs()'''
        pass

    def ProcessRange(self, data, startIndex, endIndex, rangeWorker):
        '''ProcessRange(pointer data,integer startIndex,integer endIndex,object rangeWorker)'''
        pass

    def ProcessShared(self, shared):
        '''ProcessShared(object shared)'''
        pass

    def ProcessWaterfall(self, waterfall, threads):
        '''ProcessWaterfall(object waterfall,integer threads)'''
        pass



class Undo:
    def Apply(self, undo):
        '''Apply(object undo)'''
        pass

    def Record(self, undo):
        '''Record(object undo)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def State(self):
        '''integer = State()'''
        pass



class Value:
    def ConvertValues(self, from_str, to_str):
        '''ValueConversion object = ConvertValues(string from_str,string to_str)'''
        pass

    def CreateValue(self, type):
        '''Value object = CreateValue(string type)'''
        pass

    def FloatType(self, val):
        '''integer = FloatType(float val)'''
        pass

    def FrameToTime(self, frame):
        '''float = FrameToTime(float frame)'''
        pass

    def FrameToTimeFPS(self, frame, fps):
        '''float = FrameToTimeFPS(float frame,float fps)'''
        pass

    def GetFPS(self):
        '''float = GetFPS()'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def TextHintDecode(self, buf, hint):
        '''integer value = TextHintDecode(string buf,hints hint)'''
        pass

    def TextHintEncode(self, value, hint):
        '''string = TextHintEncode(integer value,hints hint)'''
        pass

    def TimeToFrame(self, time):
        '''float = TimeToFrame(float time)'''
        pass

    def TimeToFrameFPS(self, time, fps):
        '''float = TimeToFrameFPS(float time,float fps)'''
        pass

    def ValueType(self, type):
        '''integer valType = ValueType(string type)'''
        pass



class ValueHUD:
    def ClearHUD(self, cookie):
        '''ClearHUD(string cookie)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetHUDCommands(self, cookie, command1, command2, command3, alphaSort):
        '''SetHUDCommands(string cookie,string command1,string command2,string command3,integer alphaSort)'''
        pass



class Variation:
    def InvalidateItem(self, item):
        '''InvalidateItem(object item)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass



class VertexFeature:
    def AllocVertex(self):
        '''TableauVertex object = AllocVertex()'''
        pass

    def DataType(self, ident):
        '''string typeName = DataType(string ident)'''
        pass

    def Dimension(self, ident):
        '''integer dimension = Dimension(string ident)'''
        pass

    def Lookup(self, type, name):
        '''string ident = Lookup(integer type,string name)'''
        pass

    def Name(self, ident):
        '''string name = Name(string ident)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def TestCategory(self, ident, category):
        '''boolean = TestCategory(string ident,string category)'''
        pass

    def Type(self, ident):
        '''integer type = Type(string ident)'''
        pass

    def VectorType(self, ident):
        '''string vecType = VectorType(string ident)'''
        pass



class View3Dport:
    def AddVirtualModel(self, vmodel):
        '''AddVirtualModel(object vmodel)'''
        pass

    def AllocGLViewport(self):
        '''Unknown object = AllocGLViewport()'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def Current(self):
        '''integer = Current()'''
        pass

    def GLMaterial(self, bin, item, view):
        '''Unknown object = GLMaterial(object bin,object item,object view)'''
        pass

    def ImageToGLImage(self, image):
        '''Unknown object = ImageToGLImage(object image)'''
        pass

    def InvalidateOverrider(self, scene, pkgName):
        '''integer = InvalidateOverrider(object scene,string pkgName)'''
        pass

    def Mouse(self):
        '''(integer,integer x,integer y) = Mouse()'''
        pass

    def RemoveVirtualModel(self, vmodel):
        '''RemoveVirtualModel(object vmodel)'''
        pass

    def ScriptQuery(self):
        '''Unknown object = ScriptQuery()'''
        pass

    def SetHitUVMap(self, name):
        '''SetHitUVMap(string name)'''
        pass

    def SurfaceToViewObject(self, type, item):
        '''Unknown object = SurfaceToViewObject(integer type,object item)'''
        pass

    def TriGroupToViewObject(self, type, triGroup):
        '''Unknown object = TriGroupToViewObject(integer type,object triGroup)'''
        pass

    def UpdateVirtualModel(self, vmodel):
        '''UpdateVirtualModel(object vmodel)'''
        pass

    def View(self, index):
        '''Unknown object = View(integer index)'''
        pass



